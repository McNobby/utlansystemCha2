{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teodo\\\\Documents\\\\GitHub\\\\utlansystemCha2\\\\src\\\\Components\\\\utlaan.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Sucsess from \"./Sucsess\";\nimport axios from \"axios\";\nimport sendToBackend from \"../lib/sendToBackend\";\nimport { useLogin } from \"../loginContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Utlaan() {\n  _s();\n\n  const loginState = useLogin();\n  const [scanned, setScanned] = useState([]);\n  const [sucsess, setSucsess] = useState(false);\n  useEffect(() => {\n    const utlant = JSON.parse(loginState.utlant);\n    setScanned(utlant);\n  }, [loginState]);\n\n  const handleInput = e => {\n    let regex = /\\d+ZX$/;\n    let check = regex.test(e.target.value);\n\n    if (check) {\n      sendToDB(e.target.value);\n      setTimeout(() => {\n        e.target.value = \"\";\n      }, 100);\n    }\n  };\n\n  const sendToDB = e => {\n    console.log(e);\n    const req = {\n      type: 'get',\n      getType: 'laanut',\n      _id: e\n    };\n    axios.post('http://172.31.100.69:6969/api', req).then(res => {\n      console.log(res); //checks if scanned object was found and is not loaned out\n\n      if (res.data === 'Det du skannet er ikke registrert!' || res.data === 'allerede lånt ut!') {\n        alert(res.data);\n        e = \"\";\n        return;\n      } //rest of code is if there was a suscessful response\n\n\n      const data = res.data[0];\n      const newScanned = [...scanned, {\n        id: scanned.length,\n        name: data.item,\n        bCode: data.barcode,\n        info: data.info,\n        plassering: data.plassering\n      }];\n      setScanned(newScanned); //saves new scanned item to db\n\n      sendToBackend('utlanUpdate', {\n        _id: localStorage.getItem('elevID'),\n        utlant: newScanned,\n        elevNavn: localStorage.getItem('elevNavn')\n      });\n      e = \"\"; //shows the sucsess message for 2seconds\n\n      setSucsess(true);\n      setTimeout(() => {\n        setSucsess(false);\n      }, 3000);\n    });\n  };\n\n  const scannedList = scanned.map(i => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: i.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: i.info\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", i.bCode, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", i.plassering, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, i.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [sucsess ? /*#__PURE__*/_jsxDEV(Sucsess, {\n      type: \"Sucsess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 24\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Utl\\xE5n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onInput: handleInput,\n      className: \"wideInput\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: scannedList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Utlaan, \"VKg+jl0hw8bSN4LfikeUln9etQk=\", false, function () {\n  return [useLogin];\n});\n\n_c = Utlaan;\n\nvar _c;\n\n$RefreshReg$(_c, \"Utlaan\");","map":{"version":3,"sources":["C:/Users/teodo/Documents/GitHub/utlansystemCha2/src/Components/utlaan.js"],"names":["React","useState","useEffect","Sucsess","axios","sendToBackend","useLogin","Utlaan","loginState","scanned","setScanned","sucsess","setSucsess","utlant","JSON","parse","handleInput","e","regex","check","test","target","value","sendToDB","setTimeout","console","log","req","type","getType","_id","post","then","res","data","alert","newScanned","id","length","name","item","bCode","barcode","info","plassering","localStorage","getItem","elevNavn","scannedList","map","i"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\nimport Sucsess from \"./Sucsess\"\r\nimport axios from \"axios\"\r\nimport sendToBackend from \"../lib/sendToBackend\"\r\nimport { useLogin } from \"../loginContext\"\r\n\r\nexport default function Utlaan() {\r\n    const loginState = useLogin()\r\n    const [scanned, setScanned] = useState([])\r\n    const [sucsess, setSucsess] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        const utlant = JSON.parse(loginState.utlant)\r\n        setScanned(utlant)\r\n    },[loginState])\r\n\r\n    const handleInput = (e) =>{\r\n\r\n        let regex = /\\d+ZX$/\r\n        let check = regex.test(e.target.value)\r\n        \r\n        if(check){\r\n\r\n            sendToDB(e.target.value)\r\n            setTimeout(()=>{\r\n                e.target.value = \"\"\r\n            },100)\r\n        }\r\n    }\r\n\r\n    const sendToDB = (e) =>{\r\n        console.log(e);\r\n        const req = {\r\n            type: 'get',\r\n            getType: 'laanut',\r\n            _id: e\r\n        }\r\n        axios.post('http://172.31.100.69:6969/api', req)\r\n        .then(res =>{\r\n            console.log(res);\r\n            //checks if scanned object was found and is not loaned out\r\n            if(res.data === 'Det du skannet er ikke registrert!' || res.data === 'allerede lånt ut!'){\r\n                alert(res.data)\r\n                e = \"\"\r\n                return\r\n            }\r\n            //rest of code is if there was a suscessful response\r\n            const data = res.data[0]\r\n            const newScanned = [...scanned, {\r\n                id: scanned.length,\r\n                name: data.item,\r\n                bCode: data.barcode,\r\n                info: data.info,\r\n                plassering: data.plassering\r\n            }]\r\n            setScanned(newScanned)\r\n            \r\n            //saves new scanned item to db\r\n            sendToBackend('utlanUpdate', {\r\n            _id: localStorage.getItem('elevID'), \r\n            utlant: newScanned, \r\n            elevNavn: localStorage.getItem('elevNavn') })\r\n\r\n            e = \"\"\r\n            //shows the sucsess message for 2seconds\r\n            setSucsess(true)\r\n            setTimeout(()=>{\r\n                setSucsess(false)\r\n            }, 3000)\r\n        })\r\n    }\r\n\r\n    const scannedList = scanned.map(i =>{\r\n        return(\r\n            <div className=\"listItem\" key={i.id}>\r\n            <p>{i.name}</p>\r\n            <p>{i.info}</p>\r\n            <p> {i.bCode} </p>\r\n            <p> {i.plassering} </p>\r\n            \r\n        </div>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <div className=\"card\">\r\n            {sucsess ? <Sucsess type=\"Sucsess\"/> : \"\"}\r\n            <h2>Utlån</h2>\r\n            <input type=\"text\" onInput={handleInput} className=\"wideInput\" autoFocus />\r\n                     \r\n            <div className=\"list\">\r\n                <ul>{scannedList}</ul>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}